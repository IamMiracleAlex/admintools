"""
Django settings for centricity project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from .secret_manager import get_secret
from dotenv import load_dotenv
import datetime

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '0$&^x(ds25w+)yu#4l*whn)5d(6_3$fggb@q3e0qz&=xw')


ENVIRONMENT = os.environ.get('ENVIRONMENT', 'local')
#current environments are ["prod", "test", "staging", "dev", "local"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENVIRONMENT == "local"

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    # Default required apps
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_jwt',
    'drf_yasg',
    'django_s3_storage',
    'django_db_logger',
    'custom_logger',
    'corsheaders',
    'django_filters',
    'mptt',
    'oauth2_provider',
    'social_django',
    'rest_framework_social_oauth2',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.amazon_cognito',
    'crispy_forms',
    'debug_toolbar',
    'rollbar',
    'django_celery_results',
    'django_celery_beat',
    'simple_history',
] 

# Custom apps
CUSTOM_APPS = [
    'annotation',
    'users',
    'internet_archive',
    'admintool',
    'classification',
    'ab_test',
    'priority_action',
    'subscriptions',
    'authentication',
    'custom_admin',
]

INSTALLED_APPS += CUSTOM_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'custom_logger.middleware.LogAllMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',

]

# DJANGO DEBUG TOOLBAR ONLY RUNS WHEN SERVED FROM THESE IPS
INTERNAL_IPS = [
    '127.0.0.1',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'users.context_processor.token_renderer',

            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
#used on bitbucket pipeline, so we can create an in_memory database.
if ENVIRONMENT in ["dev_deployment", "staging_deployment", "prod_deployment"]:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Local environment
elif ENVIRONMENT == "local":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('CENTRICITY_DB_NAME', 'django-centricity'),
            'USER': os.environ.get('CENTRICITY_DB_USER', 'postgres'),
            'PASSWORD': os.environ.get('CENTRICITY_DB_PASSWORD', 'root'),
            'HOST': "localhost",
            'PORT': '5432',
        },
        'staging': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'stagingdb',
            'USER': 'staginguser',
            'PASSWORD': 'password',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

#We're Live!!
else:

    SECRETS = get_secret()

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get("CENTRICITY_DB_NAME"),
            'USER': SECRETS["username"],
            'PASSWORD': SECRETS["password"],
            'HOST': SECRETS["host"],
            'PORT': SECRETS["port"],
        },
        'staging': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get("CENTRICITY_DB_NAME"),
            'USER': SECRETS.get("username"),
            'PASSWORD': SECRETS.get("dev_stag_password"),
            'HOST': SECRETS.get("staging_host"),
            'PORT': SECRETS.get("port"),
        },
        'dev': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get("CENTRICITY_DB_NAME"),
            'USER': SECRETS.get("username"),
            'PASSWORD': SECRETS.get("dev_stag_password"),
            'HOST': SECRETS.get("dev_host"),
            'PORT': SECRETS.get("port"),
        }
    }


CORS_ORIGIN_ALLOW_ALL = True

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.User'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOGIN_URL = "/login/"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

S3_BUCKET = None

if DEBUG:
    STATIC_URL = '/static/'

elif ENVIRONMENT in ("staging", "staging_deployment"):
    S3_BUCKET = "admintool-staging"
    STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"
    AWS_S3_BUCKET_NAME_STATIC = S3_BUCKET
    STATIC_URL = "https://%s.s3.amazonaws.com/" % S3_BUCKET

elif ENVIRONMENT in ["dev", "dev_deployment"]:
    S3_BUCKET = "test-django-apis-dev"
    STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"
    AWS_S3_BUCKET_NAME_STATIC = S3_BUCKET
    STATIC_URL = "https://%s.s3.amazonaws.com/" % S3_BUCKET

elif ENVIRONMENT in ["dev", "dev_deployment"]:
    S3_BUCKET = "test-django-apis-dev"
    STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"
    AWS_S3_BUCKET_NAME_STATIC = S3_BUCKET
    STATIC_URL = "https://%s.s3.amazonaws.com/" % S3_BUCKET

else:
    S3_BUCKET = "test-django-apis"
    STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"
    AWS_S3_BUCKET_NAME_STATIC = S3_BUCKET
    STATIC_URL = "https://%s.s3.amazonaws.com/" % S3_BUCKET


JAZZMIN_SETTINGS = {
    # title of the window
    'site_title': 'Centricity',

    # Title on the brand, and the login screen (19 chars max)
    # 'site_header': '',
    'site_logo': 'img/Centricity-Logo-Landscape-Darkmode-RGB.png',

    # Welcome text on the login screen
    'welcome_sign': 'Welcome to Centricity',

    # Copyright on the footer
    'copyright': 'Centricity',

    # The model admin to search from the search bar, search bar omitted if excluded
    'search_model': 'users.User',
    'custom_css': 'css/custom.css',
    "order_with_respect_to": ["annotation", "custom_admin", "react"],
    # Show related items on a modal rather than django's default pop up window
    "related_modal_active": True,
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',  # django-oauth-toolkit >= 1.0.0
        'rest_framework_social_oauth2.authentication.SocialAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'EXCEPTION_HANDLER': 'rollbar.contrib.django_rest_framework.post_exception_handler'
}

JWT_AUTH = {
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=2),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
            },
    },
    'handlers': {
        'db_log': {
            'level': 'DEBUG',
            'class': 'django_db_logger.db_log_handler.DatabaseLogHandler'
        },
    },
    'loggers': {
        'db': {
            'handlers': ['db_log'],
            # 'level': 'DEBUG'
        }
    }
}

SITE_ID = 1

COGNITO_DOMAINS = {
    'dev': 'https://dev-admintools.auth.us-east-1.amazoncognito.com',
    'staging': 'https://staging-admintools.auth.us-east-1.amazoncognito.com',
    'prod': 'https://new-annotation-api.auth.us-east-1.amazoncognito.com',
}

SOCIALACCOUNT_PROVIDERS = {
    'amazon_cognito': {
        'DOMAIN': COGNITO_DOMAINS.get(ENVIRONMENT), 
    }
}

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
LOGIN_REDIRECT_URL = '/'
SOCIALACCOUNT_ADAPTER = 'users.adapter.MySocialAccountAdapter'
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")

AUTHENTICATION_BACKENDS = (
    # Others auth providers (e.g. Facebook, OpenId, etc)

    # Google OAuth2
    'social_core.backends.google.GoogleOAuth2',
    # django-rest-framework-social-oauth2
    'rest_framework_social_oauth2.backends.DjangoOAuth2',
    # Django
    'django.contrib.auth.backends.ModelBackend',
    "authentication.auth_backend.PasswordlessAuthBackend",
)

# Google configuration
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = "111484572114-spmihgldkioq9arjog3l8ak1b2d3qost.apps.googleusercontent.com"


# Define SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE to get extra permissions from Google.
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]

# This is a temporary fix, we need a more robust way of adding clients domains
# to the whitelist. perhaps a secondary backend for holding config values
if os.environ.get("CLIENT_DOMAINS"):
    CLIENT_DOMAINS = os.environ.get("CLIENT_DOMAINS").split(',')
else:
    CLIENT_DOMAINS = []

SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = ['centricityinsights.com'] + CLIENT_DOMAINS


OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 604800
}

CRISPY_TEMPLATE_PACK = 'bootstrap4'

ROLLBAR_CONFIG = {
    'access_token': os.environ.get('ROLLBAR_ACCESS_TOKEN'),
    'environment': ENVIRONMENT,
    'branch': ENVIRONMENT,
    'root': BASE_DIR,
}

#ALLOW ADMIN FETCH DATA ON AN IFRAME
X_FRAME_OPTIONS = 'ALLOWALL'

# Change color scheme for staging environment
if ENVIRONMENT == "staging":
    JAZZMIN_UI_TWEAKS = {
        "body_small_text": True,
        "brand_colour": "navbar-primary",
        "accent": "accent-primary",
        "navbar": "navbar-primary navbar-dark",
    }

LOOKER_HOST = os.environ.get("LOOKER_EMBED_HOST", "centricity.cloud.looker.com")
LOOKER_SECRET = os.environ.get("LOOKER_EMBED_SECRET")

# Celery settings
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://admintools-redis.ho5dgi.ng.0001.use1.cache.amazonaws.com:6379') 
CELERY_RESULT_BACKEND = 'django-db'
CELERY_IMPORTS = (
    'annotation.schedules.events_and_unique_urls_status',
    'annotation.schedules.update_labelled_urls',
    'annotation.schedules.rds_internet_archive',
    'classification.schedules.delete_node_permanently',
    'custom_logger.schedules.clear_old_logs',
    'annotation.schedules.create_snapshots',
    'annotation.schedules.process_completed',
    'annotation.schedules.create_partial_db_backup.py',
    )
CELERYBEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

IS_LAMBDA_ENVIRONMENT = os.environ.get("AWS_LAMBDA_FUNCTION_NAME") is not  None

# Big query table we will pull client's data from
PARENT_BIGQUERY_TABLE = os.environ.get("PARENT_BIGQUERY_TABLE")

if DEBUG or ENVIRONMENT in ("staging", "staging_deployment"):
    AIRFLOW_ENVIRONMENT = "BetaCentricityAirflowEnvironment"

else:
    AIRFLOW_ENVIRONMENT = "CentricityAirflowEnv"


CE_S3_BUCKET = os.environ.get("CE_S3_BUCKET") #Bucket where chrome extension is located
